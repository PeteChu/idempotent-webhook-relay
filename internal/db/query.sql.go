// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getOutBoxEvent = `-- name: GetOutBoxEvent :one
SELECT id, event_id, type, payload, status, provider, retry_count, last_error, last_attempt_at, created_at, updated_at FROM outbox
WHERE event_id = $1
`

func (q *Queries) GetOutBoxEvent(ctx context.Context, eventID string) (Outbox, error) {
	row := q.db.QueryRow(ctx, getOutBoxEvent, eventID)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Type,
		&i.Payload,
		&i.Status,
		&i.Provider,
		&i.RetryCount,
		&i.LastError,
		&i.LastAttemptAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertOutboxEvent = `-- name: InsertOutboxEvent :one
INSERT INTO outbox (event_id, type, payload, provider) VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertOutboxEventParams struct {
	EventID  string
	Type     string
	Payload  []byte
	Provider string
}

func (q *Queries) InsertOutboxEvent(ctx context.Context, arg InsertOutboxEventParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertOutboxEvent,
		arg.EventID,
		arg.Type,
		arg.Payload,
		arg.Provider,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listEvents = `-- name: ListEvents :many
SELECT id, event_id, type, payload, status, provider, retry_count, last_error, last_attempt_at, created_at, updated_at FROM outbox
`

func (q *Queries) ListEvents(ctx context.Context) ([]Outbox, error) {
	rows, err := q.db.Query(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Type,
			&i.Payload,
			&i.Status,
			&i.Provider,
			&i.RetryCount,
			&i.LastError,
			&i.LastAttemptAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFailedEvents = `-- name: ListFailedEvents :many
SELECT id, event_id, type, payload, status, provider, retry_count, last_error, last_attempt_at, created_at, updated_at FROM outbox
WHERE status = 'failed'
`

func (q *Queries) ListFailedEvents(ctx context.Context) ([]Outbox, error) {
	rows, err := q.db.Query(ctx, listFailedEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Type,
			&i.Payload,
			&i.Status,
			&i.Provider,
			&i.RetryCount,
			&i.LastError,
			&i.LastAttemptAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUnprocessedEvents = `-- name: ListUnprocessedEvents :many
SELECT id, event_id, type, payload, status, provider, retry_count, last_error, last_attempt_at, created_at, updated_at FROM outbox
WHERE COALESCE(status, '') NOT IN ('pending', 'processed')
AND type = ANY($1::varchar[])
`

func (q *Queries) ListUnprocessedEvents(ctx context.Context, dollar_1 []string) ([]Outbox, error) {
	rows, err := q.db.Query(ctx, listUnprocessedEvents, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Type,
			&i.Payload,
			&i.Status,
			&i.Provider,
			&i.RetryCount,
			&i.LastError,
			&i.LastAttemptAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOutboxEvent = `-- name: UpdateOutboxEvent :exec
UPDATE outbox 
SET 
  status = $2,
  last_error = $3,
  last_attempt_at = $4
WHERE id = $1
`

type UpdateOutboxEventParams struct {
	ID            int32
	Status        pgtype.Text
	LastError     pgtype.Text
	LastAttemptAt pgtype.Timestamptz
}

func (q *Queries) UpdateOutboxEvent(ctx context.Context, arg UpdateOutboxEventParams) error {
	_, err := q.db.Exec(ctx, updateOutboxEvent,
		arg.ID,
		arg.Status,
		arg.LastError,
		arg.LastAttemptAt,
	)
	return err
}
