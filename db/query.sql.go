// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const insertOutboxEvent = `-- name: InsertOutboxEvent :one
INSERT INTO outbox (event_id, payload) VALUES ($1, $2)
RETURNING id, event_id, payload, status, retry_count, last_error, last_attempt_at, created_at, updated_at
`

type InsertOutboxEventParams struct {
	EventID string
	Payload []byte
}

func (q *Queries) InsertOutboxEvent(ctx context.Context, arg InsertOutboxEventParams) (Outbox, error) {
	row := q.db.QueryRow(ctx, insertOutboxEvent, arg.EventID, arg.Payload)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Payload,
		&i.Status,
		&i.RetryCount,
		&i.LastError,
		&i.LastAttemptAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPendingEvents = `-- name: ListPendingEvents :many
SELECT id, event_id, payload, status, retry_count, last_error, last_attempt_at, created_at, updated_at FROM outbox
WHERE status = 'pending'
`

func (q *Queries) ListPendingEvents(ctx context.Context) ([]Outbox, error) {
	rows, err := q.db.Query(ctx, listPendingEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Outbox
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Payload,
			&i.Status,
			&i.RetryCount,
			&i.LastError,
			&i.LastAttemptAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
